{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"lab1/task1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP.</p>"},{"location":"lab1/task1/#_1","title":"\u0421\u0435\u0440\u0432\u0435\u0440","text":"<p>\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438:</p> <pre><code>import socket\n\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nprint('Socket created')\n\n# \u041f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442 \u043a \u0430\u0434\u0440\u0435\u0441\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443\nHOST = 'localhost'\nPORT = 8080\ns.bind((HOST, PORT))\nprint('Socket bind complete')\n\nwhile True:\n    message, address = s.recvfrom(1024)\n    print(f\"New message from client: {message.decode()}\")\n\n    response = 'Hello, UDP Client!'\n    s.sendto(response.encode(), address)\n    print(f\"Message sent to client: {response}\")\n</code></pre>"},{"location":"lab1/task1/#_2","title":"\u041a\u043b\u0438\u0435\u043d\u0442","text":"<p>\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438:</p> <pre><code>import socket\n\ns = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nHOST = 'localhost'\nPORT = 8080\naddress = HOST, PORT\nmessage = \"Hi, UDP server!\"\n\ns.sendto(message.encode(), address)\nprint(f\"Sent message to server: {message}\")\n\nresponse, server_address = s.recvfrom(1024)\nprint(f\"Got reply from server: {response.decode()}\")\ns.close()\n</code></pre>"},{"location":"lab1/task1/#_3","title":"\u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0444\u0430\u0439\u043b \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0437\u0430\u0442\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430; \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u043f\u043e\u0441\u044b\u043b\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442. \u041e\u0431\u043c\u0435\u043d \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP(\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 socket.SOCK_DGRAM)</p>"},{"location":"lab1/task2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</p>"},{"location":"lab1/task2/#_1","title":"\u0421\u0435\u0440\u0432\u0435\u0440","text":"<p>\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438:</p> <pre><code>import socket\nfrom math import sqrt\n\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nHOST = 'localhost'\nPORT = 8080\naddress = HOST, PORT\ns.bind(address)\ns.listen(1)\nprint(\"Server is running!\")\nwhile True:\n    client_connection, client_address = s.accept()\n    print(\"We got connection now\")\n    request = client_connection.recv(1024).decode()\n    try:\n        a, b = map(float, request.split(','))\n        if a &gt; 0 and b &gt; 0:\n            result = str(sqrt(a**2 + b**2))\n        else:\n            result = \"Invalid data\"\n    except:\n        result = \"Invalid data\"\n\n# \u041e\u0442\u043f\u0440\u0430\u0432\u0438\u043b\u0438 \u043e\u0442\u0432\u0435\u0442\n    client_connection.sendall(result.encode())\n    client_connection.close()\n</code></pre>"},{"location":"lab1/task2/#_2","title":"\u041a\u043b\u0438\u0435\u043d\u0442","text":"<p>\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438:</p> <pre><code>import socket\n\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\n# \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443\nclient_socket.connect(('localhost', 8080))\n\n# \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443\nsides = input(\"Enter lengths of a and b: \")\nclient_socket.sendall(sides.encode())\n\n# \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430\nresponse = client_socket.recv(1024)\nprint(f'Server response: {response.decode()}')\n\n# \u0417\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435\nclient_socket.close()\n</code></pre>"},{"location":"lab1/task2/#_3","title":"\u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435","text":"<p>\u041f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP(\u0441\u0432\u044f\u0437\u044c, \u043e\u0442\u043e\u0441\u043b\u0430\u0442\u044c/\u043f\u0440\u0438\u043d\u044f\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f), \u0432 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441 \u043a\u043e\u043d\u0441\u043e\u043b\u0438 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0434\u0432\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.</p>"},{"location":"lab1/task3/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446</p>"},{"location":"lab1/task3/#_1","title":"\u0421\u0435\u0440\u0432\u0435\u0440","text":"<p>\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440\u0430:</p> <pre><code>import socket\n\n\nHOST = 'localhost'\nPORT = 8080\n# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043e\u043a\u0435\u0442\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind((HOST, PORT))\nserver_socket.listen(50)\nprint(f\"HTTP \u0441\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 http://{HOST}:{PORT}...\")\n\n# HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435\nhtml_content = open(\"index.html\", \"r\", encoding=\"utf-8\").read()\n\nwhile True:\n    # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    client_connection, client_address = server_socket.accept()\n    print(f'\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {client_address}')\n\n    request = client_connection.recv(1024).decode()\n    print(f'\u0417\u0430\u043f\u0440\u043e\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430:\\n{request}')\n\n    # \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c HTTP-\u043e\u0442\u0432\u0435\u0442 \u0441 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\u043c\u0438 \u0438 HTML-\u043a\u043e\u043d\u0442\u0435\u043d\u0442\u043e\u043c\n    http_response = (\n        \"HTTP/1.1 200 OK\\r\\n\"\n        \"Content-Type: text/html; charset=UTF-8\\r\\n\"\n        f\"Content-Length: {len(html_content)}\\r\\n\"\n        \"Connection: close\\r\\n\"\n        \"\\r\\n\"\n        + html_content\n    )\n\n    # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c HTTP-\u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443\n    client_connection.sendall(http_response.encode())\n\n    client_connection.close()\n</code></pre>"},{"location":"lab1/task3/#html-","title":"HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430","text":"<p>\u041b\u0438\u0441\u0442\u0438\u043d\u0433 html-\u043a\u043e\u0434\u0430:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Web-programming&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;\u0413\u0430\u0444\u0430\u0440\u043e\u0432 \u0414\u0430\u043d\u0438\u043b K3343&lt;/h1&gt;\n    &lt;p&gt; We got new connection!&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"lab1/task3/#_2","title":"\u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435","text":"<p>\u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441\u0435\u0440\u0432\u0435\u0440, \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443 http://localhost:8080/</p>"},{"location":"lab1/task4/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442.</p>"},{"location":"lab1/task4/#_1","title":"\u0421\u0435\u0440\u0432\u0435\u0440","text":"<p>\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438:</p> <pre><code>import socket\nimport threading\n\nclients = []\nusernames = []\n\n\ndef broadcast(message, sender):\n    # \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c, \u043a\u0440\u043e\u043c\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f\n    for client in clients:\n        if client is not sender:\n            client.send(message)\n\n\ndef handle_client(client_socket, client_address):\n    #  \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\n    print(f\"[{client_address}] \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f.\")\n\n    client_socket.send(\"\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u044f: \".encode('utf-8'))\n    username = client_socket.recv(1024).decode('utf-8')\n    clients.append(client_socket)\n    usernames.append(username)\n\n    welcome_message = f\"{username} \u0442\u0435\u043f\u0435\u0440\u044c \u0432 \u0447\u0430\u0442\u0435!\".encode('utf-8')\n    broadcast(welcome_message, client_socket)\n\n    try:\n        while True:\n            message = client_socket.recv(1024)\n            if message:\n                full_message = f\"{username}: {message.decode('utf-8')}\".encode('utf-8')\n                broadcast(full_message, client_socket)\n            else:\n                break\n    finally:\n        index = clients.index(client_socket)\n        clients.remove(client_socket)\n        usernames.pop(index)\n        client_socket.close()\n        print(f\"[{client_address}] \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f.\")\n        broadcast(f\"{username} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442.\".encode('utf-8'), client_socket)\n\n\ndef start_server():\n    #  \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430\n    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server.bind(('localhost', 8080))\n    server.listen()\n\n    print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u043d\u044f\u0442! \u041e\u0436\u0438\u0434\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f...\")\n\n    while True:\n        client_socket, client_address = server.accept()\n        thread = threading.Thread(target=handle_client, args=(client_socket, client_address))\n        thread.start()\n\n\nif __name__ == \"__main__\":\n    start_server()\n</code></pre>"},{"location":"lab1/task4/#_2","title":"\u041a\u043b\u0438\u0435\u043d\u0442","text":"<p>\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438:</p> <pre><code>import socket\nimport threading\n\ndef receive_messages(client_socket):\n    #  \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430\n    while True:\n        try:\n            message = client_socket.recv(1024)\n            if message:\n                print(message.decode('utf-8'))\n            else:\n                break\n        except:\n            print(\"\u041f\u043e\u0442\u0435\u0440\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f.\")\n            break\n\ndef start_client():\n    #  \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430\n    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client.connect(('localhost', 8080))\n\n    thread = threading.Thread(target=receive_messages, args=(client,))\n    thread.start()\n\n    while True:\n        message = input()\n        client.send(message.encode('utf-8'))\n\nif __name__ == \"__main__\":\n    start_client()\n</code></pre>"},{"location":"lab1/task4/#_3","title":"\u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435","text":"<p>\u041f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0438 \u043c\u043e\u0433\u0443\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442.</p>"},{"location":"lab1/task5/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5","text":"<p>\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python.</p>"},{"location":"lab1/task5/#_1","title":"\u0421\u0435\u0440\u0432\u0435\u0440","text":"<p>\u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438:</p> <pre><code>import socket\nfrom urllib.parse import unquote_plus\n\ngrades = []\n#\u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f html \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 grades\ndef generate_html():\n    html = \"&lt;html&gt;&lt;head&gt;&lt;meta charset='UTF-8'&gt;&lt;title&gt;\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\"\n    html += \"&lt;h1&gt;\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c&lt;/h1&gt;&lt;ul&gt;\"\n    subjects = {}\n    for grade in grades:\n        subject = grade['subject']\n        score = grade['score']\n        if subject in subjects:\n            subjects[subject].append(score)\n        else:\n            subjects[subject] = [score]\n\n    # \u0412\u044b\u0432\u043e\u0434 \u043e\u0446\u0435\u043d\u043e\u043a\n    for subject, scores in subjects.items():\n        html += f\"&lt;li&gt;{subject}: {', '.join(scores)}&lt;/li&gt;\"\n    html += \"&lt;/ul&gt;\"\n    html += '''\n        &lt;h2&gt;\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443&lt;/h2&gt;\n        &lt;form method=\"POST\"&gt;\n            &lt;label&gt;\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: &lt;input type=\"text\" name=\"subject\"&gt;&lt;/label&gt;&lt;br&gt;\n            &lt;label&gt;\u041e\u0446\u0435\u043d\u043a\u0430: &lt;input type=\"text\" name=\"score\"&gt;&lt;/label&gt;&lt;br&gt;\n            &lt;input type=\"submit\" value=\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c\"&gt;\n        &lt;/form&gt;\n    '''\n    html += \"&lt;/body&gt;&lt;/html&gt;\"\n    return html\n\ndef parse_post_data(data):\n    post_data = {}\n    params = data.split('&amp;')\n    for param in params:\n        key, value = param.split('=')\n        post_data[key] = unquote_plus(value)\n    return post_data\n\ndef handle_request(request):\n    headers, _, body = request.partition('\\r\\n\\r\\n')\n    lines = headers.splitlines()\n    request_line = lines[0]\n    method, path, _ = request_line.split()\n\n    if method == 'GET':\n        response_body = generate_html()\n        response = 'HTTP/1.1 200 OK\\r\\nContent-Type: text/html; charset=UTF-8\\r\\n\\r\\n' + response_body\n        return response\n\n    elif method == 'POST':\n        post_data = parse_post_data(body)\n        grades.append({'subject': post_data.get('subject', ''), 'score': post_data.get('score', '')})\n        response_body = generate_html()\n        response = 'HTTP/1.1 200 OK\\r\\nContent-Type: text/html; charset=UTF-8\\r\\n\\r\\n' + response_body\n        return response\n\ndef start_server():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    HOST = 'localhost'\n    PORT = 8080\n    server_socket.bind((HOST, PORT))\n    server_socket.listen(5)\n    print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 \u043f\u043e\u0440\u0442\u0443 http://{HOST}:{PORT}\")\n\n    while True:\n        client_socket, addr = server_socket.accept()\n        print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0442 {addr}\")\n\n        request = client_socket.recv(1024).decode('utf-8')\n        if request:\n            response = handle_request(request)\n            client_socket.sendall(response.encode('utf-8'))\n\n        client_socket.close()\n\nif __name__ == '__main__':\n    start_server()\n</code></pre>"},{"location":"lab1/task5/#_2","title":"\u041e\u0431\u044a\u044f\u0441\u043d\u0435\u043d\u0438\u0435","text":"<ol> <li>\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043d\u0430 localhost \u0438 \u043f\u043e\u0440\u0442\u0443 8080.</li> <li>\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c GET-\u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0441 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438 \u0438\u043b\u0438 POST-\u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0439 \u043e\u0446\u0435\u043d\u043a\u0438.</li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f generate_html \u0441\u043e\u0437\u0434\u0430\u0435\u0442 HTML-\u043a\u043e\u0434 \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043e\u0446\u0435\u043d\u043e\u043a \u0438 \u0444\u043e\u0440\u043c\u044b \u0434\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043e\u0446\u0435\u043d\u043e\u043a.  \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0438 \u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c HTML. \u0417\u0430\u0442\u0435\u043c \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u0430 \u043e\u0446\u0435\u043d\u043e\u043a \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u043b\u043e\u0432\u0430\u0440\u044f subjects. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441\u043f\u0438\u0441\u043e\u043a \u043e\u0446\u0435\u043d\u043e\u043a \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u043e\u0440\u043c\u0430 \u0434\u043b\u044f \u0432\u0432\u043e\u0434\u0430 \u043d\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.</li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 POST \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u0438\u0437 POST-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442 \u0435\u0451 \u043d\u0430 \u043f\u0430\u0440\u044b \u043a\u043b\u044e\u0447-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u044f \u0441\u043b\u043e\u0432\u0430\u0440\u044c post_data.</li> <li>\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u0442\u0435\u043b\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u043c\u0435\u0442\u043e\u0434 (GET \u0438\u043b\u0438 POST). \u0414\u043b\u044f GET-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f HTML \u0441 \u0442\u0435\u043a\u0443\u0449\u0438\u043c\u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438. \u0414\u043b\u044f POST-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u044e\u0442\u0441\u044f, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a grades, \u0438 \u0442\u0430\u043a\u0436\u0435 \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f HTML \u0441 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u043d\u044b\u043c \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043e\u0446\u0435\u043d\u043e\u043a.</li> </ol>"}]}